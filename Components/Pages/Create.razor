@page "/create"
@rendermode InteractiveServer
@using Neo4j.Driver;
@using System.Text;
@using Humanizer;
@using Markdig;
@using iText.Html2pdf;
@using iText.Layout;
@using iText.Layout.Borders;
@using iText.Layout.Element;
@using iText.Layout.Properties;
@using iText.Kernel.Geom;
@using iText.Kernel.Pdf;
@inject IJSRuntime JS;
@inject NavigationManager NavigationManager
@inject DatabaseSession DatabaseSession
<script src="scripts.js"></script>
<PageTitle>Create</PageTitle>
<div>
	Stream:
	<select @onchange="SetSemesters" id="stream" name="Stream">
		<option hidden disabled selected value>-- Select --</option>
		@streams
	</select>
</div>
<div>
	Semester:
	<select @onchange="SetSubjects" id="semester" name="Semester">
		<option hidden disabled selected value>-- Select --</option>
		@semesters
	</select>
</div>
<div>
	Paper:
	<select @onchange="SetSubjectsFromPaper" id="paper" name="Paper">
		<option selected>All</option>
		<option>Theory</option>
		<option>Practical</option>
		<option>Sessional</option>
	</select>
</div>
<div>
	Subjects:
	<select @onchange="SetSubject" id="paper" name="Paper">
		<option hidden disabled selected value>-- Select --</option>
		@subjects
	</select>
</div>
<div>
	Exam:
	<select @bind="examType" id="paper" name="Paper">
		<option selecter>End Semester</option>
		<option>Mid Semester</option>
	</select>
</div>
<div>
	<input type="month" @bind="month">
</div>
<div>
	<button @onclick="GenerateQuestionPaper" disabled="@generationDisabled">Generate</button>
</div>
<div>
	@questionPaper
</div>
<div>
	<center>
		<button @onclick="DownloadPDF" disabled="@downloadDisabled">Download</button>
	</center>
</div>
@code{
	private MarkupString streams,semesters,subjects,questionPaper;
	private string stream,semester,subject,paperHtml,examType="End Semester",paperType="All";
	private DateTime month;
	private bool generationDisabled=true,downloadDisabled=true;
	private MarkdownPipeline pipeline;
	private MemoryStream pdf;
	protected override async Task OnInitializedAsync(){
		month=DateTime.Now;
		pipeline=new MarkdownPipelineBuilder().UseAdvancedExtensions().Build();
		StringBuilder element=new StringBuilder();
		IResultCursor result=await DatabaseSession.session.RunAsync("match (n:Stream) return n.code;"); 
		await foreach(IRecord record in result)			
			element.AppendFormat(
				"<option value=\"{0}\">{0}</option>",
				record["n.code"]
			);
		streams=new MarkupString(element.ToString());
	}
	async void SetSemesters(ChangeEventArgs e){
		StringBuilder element=new StringBuilder();
		IResultCursor result=await DatabaseSession.session.RunAsync("match (Stream{code:\""+(stream=e.Value.ToString())+"\"})-[:Has]->(n:Semester) return n.number order by n.number;"); 
		await foreach(IRecord record in result)			
			element.AppendFormat(
				"<option value=\"{0}\">{0}</option>",
				record["n.number"]
			);
		semesters=new MarkupString(element.ToString());
		StateHasChanged();
	}
	async void SetSubjects(ChangeEventArgs e){
		StringBuilder element=new StringBuilder();
		IResultCursor result=await DatabaseSession.session.RunAsync(
			"match (Stream{code:\""+
			stream+
			"\"})-[:Has]->(Semester{number:"+
			(semester=e.Value.ToString())+
			"})-[:Has]->(n:Subject"+
			(paperType.Equals("All")?"":
				"{type:\""+paperType+"\"}"
			)+
			") return n.name;"
		); 
		await foreach(IRecord record in result)			
			element.AppendFormat(
				"<option value=\"{0}\">{0}</option>",
				record["n.name"]
			);
		subjects=new MarkupString(element.ToString());
		StateHasChanged();
	}
	async void SetSubjectsFromPaper(ChangeEventArgs e){
		paperType=e.Value.ToString();
		ChangeEventArgs dupe=new ChangeEventArgs();
		dupe.Value=semester;
		StateHasChanged();
		SetSubjects(dupe);
	}
	async void SetSubject(ChangeEventArgs e){
		subject=e.Value.ToString();
		generationDisabled=false;
	}
	async void GenerateQuestionPaper(){
		PdfDocument paperPdfPdf=new PdfDocument(new PdfWriter(pdf=new MemoryStream()));
		Document paperPdf=new Document(paperPdfPdf,PageSize.A4);
		IResultCursor dbResult=await DatabaseSession.session.RunAsync("match (n:Exam{type:\""+examType+"\"}) return n;");
		await dbResult.FetchAsync();
		IReadOnlyDictionary<string,object> exam=dbResult.Current["n"].As<INode>().Properties;
		string
			semesterString=Convert.ToInt32(semester).ToOrdinalWords(),
			monthString=month.ToString("MMMM - yyyy"),
			duration=exam["duration"].ToString(),
			marks=exam["marks"].ToString();
		semesterString=semesterString.Substring(0,1).ToUpper()+semesterString.Substring(1);
		dbResult=await DatabaseSession.session.RunAsync("match (:Stream{code:\""+stream+"\"})-[:Has]->(:Semester{number:"+semester+"})-[:Has]->(n:Subject{name:\""+subject+"\"}) return n.code");
		await dbResult.FetchAsync();
		string paperCode=(string)dbResult.Current["n.code"];
		String html=$@"
			<center>
				<div><img src=""header.png""></div>
				<div><b>{examType} Examination, {monthString}</b></div>
				<div>Degree: <b>B.Tech</b>,	Semester: <b>{semesterString}</b></div>
				<div>Stream: <b>{stream}</b></div>
				<div>Paper Code: <b>{paperCode}</b></div>
				<div>Paper Name: <b>{subject}</b></div>
			</center>
			<div>
				<span style=""float:left"">Full Marks: {marks}</span>
				<span style=""float:right"">Duration: {duration} Hours</span>
			</div>
			<div>
			<p>
				<hr>
			</p>
			</div>
		";
		StringBuilder qp=new StringBuilder(html);
		foreach(IElement element in HtmlConverter.ConvertToElements(html))
			paperPdf.Add((IBlockElement)element);
		List<IRecord> sections=new List<IRecord>();
		byte questionNumber=0;
		await foreach(IRecord record in
			await DatabaseSession.session.RunAsync("match (:Exam{type:\""+examType+"\"})-[:Has]->(n:Section) order by n.name return n")
		)
			sections.Add(record);
		foreach(IRecord record in sections){//sections
			IReadOnlyDictionary<string,object> section=record["n"].As<INode>().Properties;
			long total,score;
			html=String.Format(@"
				<center>
					<b>
						<div>
							Part - {0}
						</div>
						<div>
							Attempt {1} questions out of {2} questions
						</div>
						<div>
							Each question carries {3} marks ({3} X {1})
						</div>
					</b>
					<table>
				",
				section["name"],
				section["attempt"],
				total=(long)section["total"],
				score=(long)section["marks"]
			);
			qp.Append(html);
			foreach(IElement element in HtmlConverter.ConvertToElements(html))
				paperPdf.Add((IBlockElement)element);
			Table questions=new Table(3);
			questions.SetWidth(UnitValue.CreatePercentValue(100));
			dbResult=await DatabaseSession.session.RunAsync($"match (:Subject{{code:\"{paperCode}\"}})-[:Has]->(n:Question{{marks:{score}}}) with n,rand() as r order by r return n.text limit {total}");
			for(int i=1;i<=total;i++){
				await dbResult.FetchAsync();
				qp.AppendFormat(@"
						<tr>
							<td style=""float:left"">
								<b>{0}.</b>
							</td>
							<td style=""width:100%"">
								{1}
							</td>
							<td style=""float:right"">
								<b>{2}</b>
							</td>
						</tr>
					",
					++questionNumber,
					html=Markdown.ToHtml((string)dbResult.Current["n.text"]),
					score
				);
				Cell cell=new Cell();
				cell.SetBorder(Border.NO_BORDER);
				cell.Add(new Paragraph(questionNumber+"."));
				questions.AddCell(cell);
				cell=new Cell();
				cell.SetBorder(Border.NO_BORDER);
				cell.SetWidth(UnitValue.CreatePercentValue(100));
				foreach(IElement element in HtmlConverter.ConvertToElements(html.Substring(3,html.Length-4)))//add question
					cell.Add((IBlockElement)element);
				questions.AddCell(cell);
				cell=new Cell();
				cell.SetBorder(Border.NO_BORDER);
				cell.Add(new Paragraph(""+score));
				questions.AddCell(cell);
			}
			paperPdf.Add(questions);
			qp.Append("</table>");
		}
		qp.Append(html=@"
			<center>
				<p>
					**********
				</p>
			</center>
		");
		foreach(IElement element in HtmlConverter.ConvertToElements(html))//add ending line
			paperPdf.Add((IBlockElement)element);
		float x=paperPdf.GetLeftMargin()+10,y=paperPdf.GetBottomMargin()-10;
		int pages=paperPdfPdf.GetNumberOfPages();
		for(byte i=1;i<=pages;i++)//add page number
			new Canvas(paperPdfPdf.GetPage(i),PageSize.A4)
				.ShowTextAligned($"Page {i} of {pages}",x,y,TextAlignment.CENTER)
				.Close();
		questionPaper=new MarkupString(paperHtml=qp.ToString());
		paperPdf.Close();
		downloadDisabled=false;
		StateHasChanged();
	}
	async void DownloadPDF(){
		await JS.InvokeVoidAsync("savepdf",$"{stream}-{semester}-{subject}-{examType}.pdf",Convert.ToBase64String(pdf.ToArray()));
	}
}
